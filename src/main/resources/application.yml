spring:
  datasource:
    url: ${DATA_BASE_URL:jdbc:h2:mem:testdb}
    username: ${DATA_USERNAME:sa}
    password: ${DATA_USER_PASSWORD:password}
    driverClassName: ${DATA_DRIVER:org.h2.Driver}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: ${DATA_BASE_PLATFORM:org.hibernate.dialect.H2Dialect}
  h2:
    console:
      enabled: true  # Ativa o console H2
      path: /h2-console  # URL de acesso ao console H2
  flyway:
    enabled: true
    clean-on-validation-error: true
    baseline-on-migrate: true
  cache:
    type: redis
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      time-to-live: 3600s

logging:
  level:
    root: info
  file:
    name: LogFile.log

management:
  endpoints:
    web:
      exposure:
        include: health, metrics
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

application:
  client:
    local:
      url: http://localhost:8081
    heroku:
      url: https://user-info.herokuapp.com

resilience4j:
  circuitbreaker:
    instances:
      localService:
        failureRateThreshold: 50  # Se 50% das chamadas falharem, o circuito abre
        waitDurationInOpenState: 10s  # Tempo de espera antes de tentar restabelecer o circuito
        slidingWindowSize: 5  # Número de requisições analisadas para tomar decisão
        minimumNumberOfCalls: 2  # Garantir que pelo menos 2 requisições sejam feitas antes de avaliar
        permittedNumberOfCallsInHalfOpenState: 3  # Quantas chamadas podem ser feitas no estado semi-aberto
  timelimiter:
    instances:
      localService:
        timeoutDuration: 3s  # Tempo máximo de resposta antes de considerar falha